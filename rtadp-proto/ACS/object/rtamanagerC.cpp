// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.6
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_codegen.cpp:363


#include "rtamanagerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"

#if !defined (__ACE_INLINE__)
#include "rtamanagerC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for rtamanager::DataProcessor.

rtamanager::DataProcessor_ptr
TAO::Objref_Traits<rtamanager::DataProcessor>::duplicate (rtamanager::DataProcessor_ptr p)
{
  return rtamanager::DataProcessor::_duplicate (p);
}

void
TAO::Objref_Traits<rtamanager::DataProcessor>::release (rtamanager::DataProcessor_ptr p)
{
  ::CORBA::release (p);
}

rtamanager::DataProcessor_ptr
TAO::Objref_Traits<rtamanager::DataProcessor>::nil ()
{
  return rtamanager::DataProcessor::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<rtamanager::DataProcessor>::marshal (const rtamanager::DataProcessor_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
rtamanager::DataProcessor::configure (
  const char * jsonStaticConfiguration)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_jsonStaticConfiguration (jsonStaticConfiguration);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_jsonStaticConfiguration)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "configure",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

rtamanager::DataProcessor::DataProcessor ()
{
}
void
rtamanager::DataProcessor::_tao_any_destructor (void *_tao_void_pointer)
{
  DataProcessor *_tao_tmp_pointer =
    static_cast<DataProcessor *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

rtamanager::DataProcessor_ptr
rtamanager::DataProcessor::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<DataProcessor>::narrow (_tao_objref, "IDL:rta/rtamanager/DataProcessor:1.0");
}

rtamanager::DataProcessor_ptr
rtamanager::DataProcessor::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<DataProcessor>::unchecked_narrow (_tao_objref);
}

rtamanager::DataProcessor_ptr
rtamanager::DataProcessor::_nil ()
{
  return nullptr;
}

rtamanager::DataProcessor_ptr
rtamanager::DataProcessor::_duplicate (DataProcessor_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
rtamanager::DataProcessor::_tao_release (DataProcessor_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
rtamanager::DataProcessor::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:alma/ACS/ACSComponent:1.0") == 0 ||
      std::strcmp (value, "IDL:rta/rtamanager/DataProcessor:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* rtamanager::DataProcessor::_interface_repository_id () const
{
  return "IDL:rta/rtamanager/DataProcessor:1.0";
}

::CORBA::Boolean
rtamanager::DataProcessor::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_rtamanager_DataProcessor (
    ::CORBA::tk_objref,
    "IDL:rta/rtamanager/DataProcessor:1.0",
    "DataProcessor");
  

namespace rtamanager
{
  ::CORBA::TypeCode_ptr const _tc_DataProcessor =
    &_tao_tc_rtamanager_DataProcessor;
}
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_rtamanager_Commands[] =
  {
    "SHUTDOWN",
    "CLEANED_SHUTDOWN",
    "START",
    "STOP",
    "RESET",
    "START_DATA",
    "STOP_DATA",
    "GET_STATUS"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_rtamanager_Commands (
    "IDL:rta/rtamanager/Commands:1.0",
    "Commands",
    _tao_enumerators_rtamanager_Commands,
    8);
  

namespace rtamanager
{
  ::CORBA::TypeCode_ptr const _tc_Commands =
    &_tao_tc_rtamanager_Commands;
}
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for rtamanager::Commander.

rtamanager::Commander_ptr
TAO::Objref_Traits<rtamanager::Commander>::duplicate (rtamanager::Commander_ptr p)
{
  return rtamanager::Commander::_duplicate (p);
}

void
TAO::Objref_Traits<rtamanager::Commander>::release (rtamanager::Commander_ptr p)
{
  ::CORBA::release (p);
}

rtamanager::Commander_ptr
TAO::Objref_Traits<rtamanager::Commander>::nil ()
{
  return rtamanager::Commander::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<rtamanager::Commander>::marshal (const rtamanager::Commander_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
rtamanager::Commander::configure (
  const char * jsonStaticConfiguration)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_jsonStaticConfiguration (jsonStaticConfiguration);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_jsonStaticConfiguration)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "configure",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
rtamanager::Commander::sendCommand (
  ::rtamanager::Commands command,
  const char * destProcessorName)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::rtamanager::Commands>::in_arg_val _tao_command (command);
  TAO::Arg_Traits< char *>::in_arg_val _tao_destProcessorName (destProcessorName);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_command),
      std::addressof(_tao_destProcessorName)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "sendCommand",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

rtamanager::Commander::Commander ()
{
}
void
rtamanager::Commander::_tao_any_destructor (void *_tao_void_pointer)
{
  Commander *_tao_tmp_pointer =
    static_cast<Commander *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

rtamanager::Commander_ptr
rtamanager::Commander::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<Commander>::narrow (_tao_objref, "IDL:rta/rtamanager/Commander:1.0");
}

rtamanager::Commander_ptr
rtamanager::Commander::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<Commander>::unchecked_narrow (_tao_objref);
}

rtamanager::Commander_ptr
rtamanager::Commander::_nil ()
{
  return nullptr;
}

rtamanager::Commander_ptr
rtamanager::Commander::_duplicate (Commander_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
rtamanager::Commander::_tao_release (Commander_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
rtamanager::Commander::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:alma/ACS/ACSComponent:1.0") == 0 ||
      std::strcmp (value, "IDL:rta/rtamanager/Commander:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* rtamanager::Commander::_interface_repository_id () const
{
  return "IDL:rta/rtamanager/Commander:1.0";
}

::CORBA::Boolean
rtamanager::Commander::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_rtamanager_Commander (
    ::CORBA::tk_objref,
    "IDL:rta/rtamanager/Commander:1.0",
    "Commander");
  

namespace rtamanager
{
  ::CORBA::TypeCode_ptr const _tc_Commander =
    &_tao_tc_rtamanager_Commander;
}
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<rtamanager::DataProcessor>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace rtamanager
{
  

  /// Copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    DataProcessor_ptr _tao_elem)
  {
    DataProcessor_ptr _tao_objptr =
      DataProcessor::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    DataProcessor_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<DataProcessor>::insert (
      _tao_any,
      DataProcessor::_tao_any_destructor,
      _tc_DataProcessor,
      *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      DataProcessor_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<DataProcessor>::extract (
          _tao_any,
          DataProcessor::_tao_any_destructor,
          _tc_DataProcessor,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  rtamanager::DataProcessor_ptr _tao_elem)
{
  rtamanager::DataProcessor_ptr _tao_objptr =
    rtamanager::DataProcessor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  rtamanager::DataProcessor_ptr *_tao_elem)
{
  TAO::Any_Impl_T<rtamanager::DataProcessor>::insert (
    _tao_any,
    rtamanager::DataProcessor::_tao_any_destructor,
    rtamanager::_tc_DataProcessor,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    rtamanager::DataProcessor_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<rtamanager::DataProcessor>::extract (
        _tao_any,
        rtamanager::DataProcessor::_tao_any_destructor,
        rtamanager::_tc_DataProcessor,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace rtamanager
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::rtamanager::Commands _tao_elem)
  {
    TAO::Any_Basic_Impl_T< ::rtamanager::Commands>::insert (
        _tao_any,
        ::rtamanager::_tc_Commands,
        _tao_elem);
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::rtamanager::Commands &_tao_elem)
  {
    return
      TAO::Any_Basic_Impl_T< ::rtamanager::Commands>::extract (
          _tao_any,
          ::rtamanager::_tc_Commands,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    rtamanager::Commands _tao_elem)
{
  TAO::Any_Basic_Impl_T<rtamanager::Commands>::insert (
      _tao_any,
      rtamanager::_tc_Commands,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    rtamanager::Commands &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<rtamanager::Commands>::extract (
        _tao_any,
        rtamanager::_tc_Commands,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<rtamanager::Commander>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace rtamanager
{
  

  /// Copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    Commander_ptr _tao_elem)
  {
    Commander_ptr _tao_objptr =
      Commander::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    Commander_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Commander>::insert (
      _tao_any,
      Commander::_tao_any_destructor,
      _tc_Commander,
      *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Commander_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Commander>::extract (
          _tao_any,
          Commander::_tao_any_destructor,
          _tc_Commander,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  rtamanager::Commander_ptr _tao_elem)
{
  rtamanager::Commander_ptr _tao_objptr =
    rtamanager::Commander::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  rtamanager::Commander_ptr *_tao_elem)
{
  TAO::Any_Impl_T<rtamanager::Commander>::insert (
    _tao_any,
    rtamanager::Commander::_tao_any_destructor,
    rtamanager::_tc_Commander,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    rtamanager::Commander_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<rtamanager::Commander>::extract (
        _tao_any,
        rtamanager::Commander::_tao_any_destructor,
        rtamanager::_tc_Commander,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif
// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const rtamanager::DataProcessor_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    rtamanager::DataProcessor_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::rtamanager::DataProcessor>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, rtamanager::Commands _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, rtamanager::Commands & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<rtamanager::Commands> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /alma/ACS-2023AUG/TAO/ACE_wrappers/build/linux/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const rtamanager::Commander_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    rtamanager::Commander_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::rtamanager::Commander>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



