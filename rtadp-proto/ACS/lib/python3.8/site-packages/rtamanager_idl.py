# Python stubs generated by omniidl from /home/astrisw/src/rtadp-proto/ACS/idl/../idl/rtamanager.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")

# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")

# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "rtamanager"
#
__name__ = "rtamanager"
_0_rtamanager = omniORB.openModule("rtamanager", r"/home/astrisw/src/rtadp-proto/ACS/idl/../idl/rtamanager.idl")
_0_rtamanager__POA = omniORB.openModule("rtamanager__POA", r"/home/astrisw/src/rtadp-proto/ACS/idl/../idl/rtamanager.idl")


# interface DataProcessor
_0_rtamanager._d_DataProcessor = (omniORB.tcInternal.tv_objref, "IDL:rta/rtamanager/DataProcessor:1.0", "DataProcessor")
omniORB.typeMapping["IDL:rta/rtamanager/DataProcessor:1.0"] = _0_rtamanager._d_DataProcessor
_0_rtamanager.DataProcessor = omniORB.newEmptyClass()
class DataProcessor (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_rtamanager._d_DataProcessor[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_rtamanager.DataProcessor = DataProcessor
_0_rtamanager._tc_DataProcessor = omniORB.tcInternal.createTypeCode(_0_rtamanager._d_DataProcessor)
omniORB.registerType(DataProcessor._NP_RepositoryId, _0_rtamanager._d_DataProcessor, _0_rtamanager._tc_DataProcessor)

# DataProcessor operations and attributes
DataProcessor._d_configure = (((omniORB.tcInternal.tv_string,0), ), (), None)

# DataProcessor object reference
class _objref_DataProcessor (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = DataProcessor._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def configure(self, *args):
        return self._obj.invoke("configure", _0_rtamanager.DataProcessor._d_configure, args)

omniORB.registerObjref(DataProcessor._NP_RepositoryId, _objref_DataProcessor)
_0_rtamanager._objref_DataProcessor = _objref_DataProcessor
del DataProcessor, _objref_DataProcessor

# DataProcessor skeleton
__name__ = "rtamanager__POA"
class DataProcessor (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_rtamanager.DataProcessor._NP_RepositoryId


    _omni_op_d = {"configure": _0_rtamanager.DataProcessor._d_configure}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

DataProcessor._omni_skeleton = DataProcessor
_0_rtamanager__POA.DataProcessor = DataProcessor
omniORB.registerSkeleton(DataProcessor._NP_RepositoryId, DataProcessor)
del DataProcessor
__name__ = "rtamanager"

# enum Commands
_0_rtamanager.SHUTDOWN = omniORB.EnumItem("SHUTDOWN", 0)
_0_rtamanager.CLEANED_SHUTDOWN = omniORB.EnumItem("CLEANED_SHUTDOWN", 1)
_0_rtamanager.START = omniORB.EnumItem("START", 2)
_0_rtamanager.STOP = omniORB.EnumItem("STOP", 3)
_0_rtamanager.RESET = omniORB.EnumItem("RESET", 4)
_0_rtamanager.START_DATA = omniORB.EnumItem("START_DATA", 5)
_0_rtamanager.STOP_DATA = omniORB.EnumItem("STOP_DATA", 6)
_0_rtamanager.GET_STATUS = omniORB.EnumItem("GET_STATUS", 7)
_0_rtamanager.Commands = omniORB.Enum("IDL:rta/rtamanager/Commands:1.0", (_0_rtamanager.SHUTDOWN, _0_rtamanager.CLEANED_SHUTDOWN, _0_rtamanager.START, _0_rtamanager.STOP, _0_rtamanager.RESET, _0_rtamanager.START_DATA, _0_rtamanager.STOP_DATA, _0_rtamanager.GET_STATUS,))

_0_rtamanager._d_Commands  = (omniORB.tcInternal.tv_enum, _0_rtamanager.Commands._NP_RepositoryId, "Commands", _0_rtamanager.Commands._items)
_0_rtamanager._tc_Commands = omniORB.tcInternal.createTypeCode(_0_rtamanager._d_Commands)
omniORB.registerType(_0_rtamanager.Commands._NP_RepositoryId, _0_rtamanager._d_Commands, _0_rtamanager._tc_Commands)

# interface Commander
_0_rtamanager._d_Commander = (omniORB.tcInternal.tv_objref, "IDL:rta/rtamanager/Commander:1.0", "Commander")
omniORB.typeMapping["IDL:rta/rtamanager/Commander:1.0"] = _0_rtamanager._d_Commander
_0_rtamanager.Commander = omniORB.newEmptyClass()
class Commander (_0_ACS.ACSComponent):
    _NP_RepositoryId = _0_rtamanager._d_Commander[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_rtamanager.Commander = Commander
_0_rtamanager._tc_Commander = omniORB.tcInternal.createTypeCode(_0_rtamanager._d_Commander)
omniORB.registerType(Commander._NP_RepositoryId, _0_rtamanager._d_Commander, _0_rtamanager._tc_Commander)

# Commander operations and attributes
Commander._d_configure = (((omniORB.tcInternal.tv_string,0), ), (), None)
Commander._d_sendCommand = ((omniORB.typeMapping["IDL:rta/rtamanager/Commands:1.0"], (omniORB.tcInternal.tv_string,0)), (), None)

# Commander object reference
class _objref_Commander (_0_ACS._objref_ACSComponent):
    _NP_RepositoryId = Commander._NP_RepositoryId

    def __init__(self, obj):
        _0_ACS._objref_ACSComponent.__init__(self, obj)

    def configure(self, *args):
        return self._obj.invoke("configure", _0_rtamanager.Commander._d_configure, args)

    def sendCommand(self, *args):
        return self._obj.invoke("sendCommand", _0_rtamanager.Commander._d_sendCommand, args)

omniORB.registerObjref(Commander._NP_RepositoryId, _objref_Commander)
_0_rtamanager._objref_Commander = _objref_Commander
del Commander, _objref_Commander

# Commander skeleton
__name__ = "rtamanager__POA"
class Commander (_0_ACS__POA.ACSComponent):
    _NP_RepositoryId = _0_rtamanager.Commander._NP_RepositoryId


    _omni_op_d = {"configure": _0_rtamanager.Commander._d_configure, "sendCommand": _0_rtamanager.Commander._d_sendCommand}
    _omni_op_d.update(_0_ACS__POA.ACSComponent._omni_op_d)

Commander._omni_skeleton = Commander
_0_rtamanager__POA.Commander = Commander
omniORB.registerSkeleton(Commander._NP_RepositoryId, Commander)
del Commander
__name__ = "rtamanager"

#
# End of module "rtamanager"
#
__name__ = "rtamanager_idl"

_exported_modules = ( "rtamanager", )

# The end.
